
Author: Simon Kowallik <sk simonkowallik.com>
License: GPL2


DESCRIPTION
===========
advsnmp.discovery is an alternative to the build-in SNMP low level discovery of Zabbix 2.0.
It integrates seamless into Zabbix by using "External check" discovery rules.

advsnmp.discovery has some more advanced indexing features then the build-in variant:
- Multiple Indexes {#ADVSNMPINDEX1} - {#ADVSNMPINDEXn}
- Variable Indexlength

This discovery script is written in perl without any modules for maximum flexibility.
However it requires the net-snmp tool 'snmpwalk'.

advsnmp.discovery has been tested with Zabbix 1.9.10 (trunk),
which is an alpha version of Zabbix 2.0.


ATTENTION
=========
At the time of writing this, there is an open bug ZBX-4725 which has some impact to
the usage of this script but does not limit its main fuctionality.
Right now, you HAVE TO use {HOST.IP} to specify the target to query!
If this bug is solved, you need to change $ZBX_4725_workaround to 0.


COMPATIBILITY
=============
Zabbix 1.9.10 (trunk) Alpha Release
Zabbix 2.0 (not released/untested)


INSTALLATION
============
advsnmp.discovery is an external script, therefore you need to place it in the
ExternalScripts directory of your Zabbix installation.
Default is: ${datadir}/zabbix/externalscripts
Check your zabbix_server.conf if in doubt.

Then chmod a+x advsnmp.discovery

Do not rename the script!
Otherwise it will not work if you do so (without modifying the JSON response)!


USAGE
=====
Bascially you use advsnmp.discovery like an "External Check" Item in Zabbix.
So, when creating a discovery rule, select "External Check".

In the "Key" field, you specify advsnmp.discovery[ARGUMENTS].

ARGUMENTS Syntax:
Parameter1 (required):			IP Address or Hostname
Parameter2 (required):			SNMP Options encapsulated by quotes ""
					You should provide the SNMP Version
					and community at least
Parameter3 (required):			Numeric "Base" OID to use for indexing
Parameter4 (required):			INDEX Offset and INDEX Length
All following Parameters (optional):	INDEX Offset and INDEX Length

Examples:
advsnmp.discovery[{HOST.IP},"-v2c -cpublic",.1.2.3.4.5.6.7.8,1.1}
advsnmp.discovery[{HOST.NAME},"-v2c -cmycommunity",.1.2.3.4.5.6.7.8,1.1,3.2,7.4}


HOW DOES IT WORK?
=================
advsnmp.discovery uses snmpwalk to query the specified hosti (Parameter1).

It will use Parameter2 as Options to snmpwalk, it is required to specify the SNMP Version and SNMP Community.
If you use SNMP Version 2c, you would use someting like: "-v2c -cMySNMPCommunity"
If you use SNMP Version 3, add your authentication and encryption settings.

Parameter3 will be used as the base OID, which will be provided to walk the OID path.

Now the interesting part: Parameter4 and all following Parameters.
Parameter4 specifies the INDEX and its length in the format 'n.m'.
Where 'n' is the relative offset for the INDEX value from the base OID, counted from left to right.
'm' is the "OID length", that means how much OID Elements to span.

Note, by 'OID Elements' I mean each value, which is separated by a dot (.).
OID '.1.2.3.4' has 4 Elements.

Now by example:
---------------

OIDs we would like to query by a discovery rule:
.1.2.3.4.5.6.7.8.10.20.30.100.200.300
.1.2.3.4.5.6.7.8.10.21.30.101.202.303
.1.2.3.4.5.6.7.8.10.22.30.111.222.333

We specify .1.2.3.4.5.6.7.8 as the Base OID (Parameter3).
advsnmp.discovery will use that OID to do the SNMPWALK.

The OIDs we would like to query will be returned and truncated like this:
		.10.20.30.100.200.300
		.10.21.30.101.202.303
		.10.22.30.111.222.333

Parameter4 (and following..) specify the index values to use and its length.
This works like this:
Parameter4: 2.1 (Offset=2 Length=1)
Parameter5: 4.3 (Offset=4 Length=3)

advsnmp.discovery will split the OID to single parts:
Element1   Element2   Element3   Element4   Element5   Element6
   10	      20	 30	   100	 	200	 300
   10	      21	 30	   101	 	202	 303
   10	      22	 30	   111	 	222	 333

Parameter4 specifies an offset of 2. This means Element2 (20,21,22) will be used as the index.
Parameter4's length is set to 1, therefore that's it. Element2 will be {#ADVSNMPINDEX1}.
{#ADVSNMPINDEX1}	=	20
{#ADVSNMPINDEX1}	=	21
{#ADVSNMPINDEX1}	=	22

Parameter5 specifies an offset of 4 which means Element4 will be used as the index.
Parameter5 also specifies a length of 3. That means the index will be expanded to Element5 and Element6.
Parameter5 will have Element4+Element5+Element6 as the index. Therefore {#ADVSNMPINDEX2} would look like:
{#ADVSNMPINDEX2}	=	100.200.300
{#ADVSNMPINDEX2}	=	101.202.303
{#ADVSNMPINDEX2}	=	111.222.333

If you would specify more Parameters,
like Parameter6, Parameter7, Parameter8, .. those would map to
{#ADVSNMPINDEX3}, {#ADVSNMPINDEX4}, {#ADVSNMPINDEX5}


TROUBLESHOOTING
===============
1. Try snmpwalk manually with the options you specified (Parameter1, Parameter2, Parameter3)
2. Try using only numeric OIDs.
3. Check the path to snmpwalk. advsnmp.discovery uses /usr/bin/snmpwalk
   If you need to change it, look for $SNMPWALK_BIN
4. Try advsnmp.discovery manually: ./advsnmp.discovery 198.18.0.123 "-v2c -cmycommunity" .1.2.3.4.5.6.7.8 1.1 2.1



MORE EXAMPLES
=============


advsnmp.discovery[{HOST.IP},"-v2c -cpublic",.1.2.3.4.5.6,offset.length,offset.length,offset.lentgh
                      ^            ^             ^              ^             ^            ^
                      |            |             |              |             |            |
                      |            |             |              |             |            |
                 IP/DNS Name       |             |               \            |           /
                             SNMP Settings    SNMP OID           INDEX_offset.INDEX_length

EXAMPLE:
 OIDs to query:
 .0.0.0.0.0.0.1.0.2.1.1.4.4.0
 .0.0.0.0.0.0.2.0.3.6.1.4.4.0
 .0.0.0.0.0.0.3.0.4.5.1.4.4.0
 .0.0.0.0.0.0.1.0.2.4.5.3.4.0
 .0.0.0.0.0.0.2.0.2.2.5.3.4.0
 .0.0.0.0.0.0.3.0.2.9.5.3.4.0

 Discovery Rule with "external check"
 Key: advsnmp.discovery[{HOST.IP},"-v2c -cpublic",.0.0.0.0.0.0,1.1,3.2,5.3]

OID: .0.0.0.0.0.0.1.0.2.1.1.4.4.0
will be cut to:  .1.0.2.1.1.4.4.0

     .     1 .     0 .     2 .     1 .     1 .     4 .     4 .     0
0=>'', 1=>'1', 2=>'0', 3=>'2', 4=>'1', 5=>'1', 6=>'4', 7=>'4', 8=>'0'

         $_offset     $_len
                 \   /
config: INDEX1 -> 1.1
        INDEX2 -> 3.2
        INDEX3 -> 5.3

   INDEX1   INDEX2   INDEX3
      \       |       /
     .[1].0.[2.1].[1.4.4].0


 Indexes will be:
 ADVSNMPINDEX1 ADVSNMPINDEX2 ADVSNMPINDEX3
       1            2.1          1.4.4
       2            3.6          1.4.4
       3            4.5          1.4.4
       1            2.4          5.3.4
       2            2.2          5.3.4
       3            2.9          5.3.4

